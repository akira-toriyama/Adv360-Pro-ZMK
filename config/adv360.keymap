// リファクタ
// _/ の 不要ファイルの削除

// keymap 画像
// https://github.com/caksoylar/keymap-drawer?tab=readme-ov-file

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/mouse.h>

// レイヤー
// ------------------------------------
#define DEFAULT_LAYER 0
#define NUM_LAYER 1
#define SYMBOL1_LAYER 2
#define SYMBOL2_LAYER 3
#define LL_LAYER 4
#define TAB_LAYER 5
#define DELETE_LAYER 6
#define LEFT_ARROW_LAYER 7
#define RIGHT_ARROW_LAYER 8
#define UP_ARROW_LAYER 9
#define DOWN_ARROW_LAYER 10
#define MOUSE_LAYER 11
// ------------------------------------

// エイリアス
// ------------------------------------
// 和英
#define EIJI LANGUAGE_2
#define KANA LANGUAGE_1

// 親指
#define T_LL LEFT_SHIFT RETURN
#define T_LR LEFT_COMMAND BACKSPACE
#define T_RL LEFT_ALT ESC
#define T_RR LEFT_CONTROL SPACE

// 左手
#define LH_NUM NUM_LAYER
#define LH_SYM1 SYMBOL1_LAYER
#define LH_SYM2 SYMBOL2_LAYER 

// マウス関連
// zmk に機能追加されるまで、karabiner で代用
#define MOUSE_L RG(RA(RS(RC(F24))))
#define MOUSE_D RG(RA(RS(RC(F23))))
#define MOUSE_R RG(RA(RS(RC(F22))))
#define MOUSE_U RG(RA(RS(RC(F21))))

#define MOUSE_WL RG(RA(RS(RC(F20))))
#define MOUSE_WR RG(RA(RS(RC(F19))))
#define MOUSE_WU RG(RA(RS(RC(F18))))
#define MOUSE_WD RG(RA(RS(RC(F17))))
// ------------------------------------

// キー位置
// https://github.com/KinesisCorporation/Adv360-Pro-ZMK/blob/V3.0/assets/key-positions.md
// ------------------------------------
#define KEY_POSITION_LL 65
#define KEY_POSITION_LR 66
#define KEY_POSITION_RL 69
#define KEY_POSITION_RR 70

#define KEY_POSITION_UP_ARROW 56
#define KEY_POSITION_LEFT_ARROW 71
#define KEY_POSITION_DOWN_ARROW 72
#define KEY_POSITION_RIGHT_ARROW 73

#define KEY_POSITION_LEFT_SIDE 14 15 16 17 18 19 28 29 30 31 32 33 46 47 48 49 50 51
#define KEY_POSITION_THUMB KEY_POSITION_LL KEY_POSITION_LR KEY_POSITION_RL KEY_POSITION_RR
// ------------------------------------

// OSに渡す用ショートカット
// ------------------------------------
// LL
#define X_LL_LL KP_N0

#define X_LL_Q KP_N1
#define X_LL_W KP_N2
#define X_LL_E KP_N3
#define X_LL_R KP_N4
#define X_LL_T KP_N5
#define X_LL_A KP_N6
#define X_LL_S KP_N7
#define X_LL_D KP_N8
#define X_LL_F KP_N9
#define X_LL_G KP_PLUS
#define X_LL_Z KP_EQUAL
#define X_LL_X KP_DOT
#define X_LL_C KP_MINUS
#define X_LL_V KP_SLASH
#define X_LL_B KP_ASTERISK
#define X_LL_T_LL INSERT // 親指なので重複OK
#define X_LL_T_LR KP_ENTER // 親指なので重複OK
#define X_LL_T_RL NON_US_BACKSLASH // 親指なので重複OK
#define X_LL_T_RR K_APPLICATION // 親指なので重複OK

// TAB: SHIFT ALT
#define X_TAB_Q RS(RA(F13))
#define X_TAB_W RS(RA(F14))
#define X_TAB_E RS(RA(F15))
#define X_TAB_R RS(RA(F16))
#define X_TAB_T RS(RA(F17))
#define X_TAB_A RS(RA(F18))
#define X_TAB_S RS(RA(F19))
#define X_TAB_D RS(RA(F20))
#define X_TAB_F RS(RA(F21))
#define X_TAB_G RS(RA(F22))
#define X_TAB_Z RS(RA(F23))
#define X_TAB_X RS(RA(F24))
#define X_TAB_C RS(RA(NON_US_HASH))
#define X_TAB_V RS(RA(PRINTSCREEN))
#define X_TAB_B RS(RA(PAUSE_BREAK))
#define X_TAB_T_LL RS(RA(INSERT))
#define X_TAB_T_LR RS(RA(KP_ENTER))
#define X_TAB_T_RL RS(RA(NON_US_BACKSLASH))
#define X_TAB_T_RR RS(RA(K_APPLICATION))

// DELETE: SHIFT, COMMAND
#define X_DELETE_Q RS(RG(F13))
#define X_DELETE_W RS(RG(F14))
#define X_DELETE_E RS(RG(F15))
#define X_DELETE_R RS(RG(F16))
#define X_DELETE_T RS(RG(F17))
#define X_DELETE_A RS(RG(F18))
#define X_DELETE_S RS(RG(F19))
#define X_DELETE_D RS(RG(F20))
#define X_DELETE_F RS(RG(F21))
#define X_DELETE_G RS(RG(F22))
#define X_DELETE_Z RS(RG(F23))
#define X_DELETE_X RS(RG(F24))
#define X_DELETE_C RS(RG(NON_US_HASH))
#define X_DELETE_V RS(RG(PRINTSCREEN))
#define X_DELETE_B RS(RG(PAUSE_BREAK))
#define X_DELETE_T_LL RS(RG(INSERT))
#define X_DELETE_T_LR RS(RG(KP_ENTER))
#define X_DELETE_T_RL RS(RG(NON_US_BACKSLASH))
#define X_DELETE_T_RR RS(RG(K_APPLICATION))

// LEFT_ARROW: ALT, CTRL
#define X_LEFT_ARROW_Q RA(RC(F13))
#define X_LEFT_ARROW_W RA(RC(F14))
#define X_LEFT_ARROW_E RA(RC(F15))
#define X_LEFT_ARROW_R RA(RC(F16))
#define X_LEFT_ARROW_T RA(RC(F17))
#define X_LEFT_ARROW_A RA(RC(F18))
#define X_LEFT_ARROW_S RA(RC(F19))
#define X_LEFT_ARROW_D RA(RC(F20))
#define X_LEFT_ARROW_F RA(RC(F21))
#define X_LEFT_ARROW_G RA(RC(F22))
#define X_LEFT_ARROW_Z RA(RC(F23))
#define X_LEFT_ARROW_X RA(RC(F24))
#define X_LEFT_ARROW_C RA(RC(NON_US_HASH))
#define X_LEFT_ARROW_V RA(RC(PRINTSCREEN))
#define X_LEFT_ARROW_B RA(RC(PAUSE_BREAK))
#define X_LEFT_ARROW_T_LL RA(RC(INSERT))
#define X_LEFT_ARROW_T_LR RA(RC(KP_ENTER))
#define X_LEFT_ARROW_T_RL RA(RC(NON_US_BACKSLASH))
#define X_LEFT_ARROW_T_RR RA(RC(K_APPLICATION))

// RIGHT_ARROW: COMMAND, CTRL
#define X_RIGHT_ARROW_Q RG(RC(F13))
#define X_RIGHT_ARROW_W RG(RC(F14))
#define X_RIGHT_ARROW_E RG(RC(F15))
#define X_RIGHT_ARROW_R RG(RC(F16))
#define X_RIGHT_ARROW_T RG(RC(F17))
#define X_RIGHT_ARROW_A RG(RC(F18))
#define X_RIGHT_ARROW_S RG(RC(F19))
#define X_RIGHT_ARROW_D RG(RC(F20))
#define X_RIGHT_ARROW_F RG(RC(F21))
#define X_RIGHT_ARROW_G RG(RC(F22))
#define X_RIGHT_ARROW_Z RG(RC(F23))
#define X_RIGHT_ARROW_X RG(RC(F24))
#define X_RIGHT_ARROW_C RG(RC(NON_US_HASH))
#define X_RIGHT_ARROW_V RG(RC(PRINTSCREEN))
#define X_RIGHT_ARROW_B RG(RC(PAUSE_BREAK))
#define X_RIGHT_ARROW_T_LL RG(RC(INSERT))
#define X_RIGHT_ARROW_T_LR RG(RC(KP_ENTER))
#define X_RIGHT_ARROW_T_RL RG(RC(NON_US_BACKSLASH))
#define X_RIGHT_ARROW_T_RR RG(RC(K_APPLICATION))

// UP_ARROW: SHIFT, CTRL
#define X_UP_ARROW_Q RS(RC(F13))
#define X_UP_ARROW_W RS(RC(F14))
#define X_UP_ARROW_E RS(RC(F15))
#define X_UP_ARROW_R RS(RC(F16))
#define X_UP_ARROW_T RS(RC(F17))
#define X_UP_ARROW_A RS(RC(F18))
#define X_UP_ARROW_S RS(RC(F19))
#define X_UP_ARROW_D RS(RC(F20))
#define X_UP_ARROW_F RS(RC(F21))
#define X_UP_ARROW_G RS(RC(F22))
#define X_UP_ARROW_Z RS(RC(F23))
#define X_UP_ARROW_X RS(RC(F24))
#define X_UP_ARROW_C RS(RC(NON_US_HASH))
#define X_UP_ARROW_V RS(RC(PRINTSCREEN))
#define X_UP_ARROW_B RS(RC(PAUSE_BREAK))
#define X_UP_ARROW_T_LL RS(RC(INSERT))
#define X_UP_ARROW_T_LR RS(RC(KP_ENTER))
#define X_UP_ARROW_T_RL RS(RC(NON_US_BACKSLASH))
#define X_UP_ARROW_T_RR RS(RC(K_APPLICATION))

// DOWN_ARROW: COMMAND, ALT
#define X_DOWN_ARROW_Q RG(RA(F13))
#define X_DOWN_ARROW_W RG(RA(F14))
#define X_DOWN_ARROW_E RG(RA(F15))
#define X_DOWN_ARROW_R RG(RA(F16))
#define X_DOWN_ARROW_T RG(RA(F17))
#define X_DOWN_ARROW_A RG(RA(F18))
#define X_DOWN_ARROW_S RG(RA(F19))
#define X_DOWN_ARROW_D RG(RA(F20))
#define X_DOWN_ARROW_F RG(RA(F21))
#define X_DOWN_ARROW_G RG(RA(F22))
#define X_DOWN_ARROW_Z RG(RA(F23))
#define X_DOWN_ARROW_X RG(RA(F24))
#define X_DOWN_ARROW_C RG(RA(NON_US_HASH))
#define X_DOWN_ARROW_V RG(RA(PRINTSCREEN))
#define X_DOWN_ARROW_B RG(RA(PAUSE_BREAK))
#define X_DOWN_ARROW_T_LL RG(RA(INSERT))
#define X_DOWN_ARROW_T_LR RG(RA(KP_ENTER))
#define X_DOWN_ARROW_T_RL RG(RA(NON_US_BACKSLASH))
#define X_DOWN_ARROW_T_RR RG(RA(K_APPLICATION))
// ------------------------------------

// https://github.com/zmkfirmware/zmk/pull/1811
&mt {
    hold-while-undecided;
};

/ {
  combos {
      compatible = "zmk,combos";

      combo_kana {
          key-positions = <KEY_POSITION_LL KEY_POSITION_LR>;
          bindings = <&_w_oll_olr LS(LEFT_COMMAND) &_kana>;
      };

      combo_eiji {
          key-positions = <KEY_POSITION_RL KEY_POSITION_RR>;
          bindings = <&_w_orl_orr LC(LALT) &_eiji>;
      };
  };

  macros {
     eiji_a: eiji_a {
          compatible = "zmk,behavior-macro";
          #binding-cells = <0>;
          bindings
              = <&macro_tap &kp EIJI>
              , <&macro_press &kp LS(A)>
              , <&macro_pause_for_release>
              , <&macro_release &kp LS(A)>
              ;
      };

      eiji_b: eiji_b {
          compatible = "zmk,behavior-macro";
          #binding-cells = <0>;
          bindings
              = <&macro_tap &kp EIJI>
              , <&macro_press &kp LS(B)>
              , <&macro_pause_for_release>
              , <&macro_release &kp LS(B)>
              ;
      };

      eiji_c: eiji_c {
          compatible = "zmk,behavior-macro";
          #binding-cells = <0>;
          bindings
              = <&macro_tap &kp EIJI>
              , <&macro_press &kp LS(C)>
              , <&macro_pause_for_release>
              , <&macro_release &kp LS(C)>
              ;
      };

      eiji_d: eiji_d {
          compatible = "zmk,behavior-macro";
          #binding-cells = <0>;
          bindings
              = <&macro_tap &kp EIJI>
              , <&macro_press &kp LS(D)>
              , <&macro_pause_for_release>
              , <&macro_release &kp LS(D)>
              ;
      };

      eiji_e: eiji_e {
          compatible = "zmk,behavior-macro";
          #binding-cells = <0>;
          bindings
              = <&macro_tap &kp EIJI>
              , <&macro_press &kp LS(E)>
              , <&macro_pause_for_release>
              , <&macro_release &kp LS(E)>
              ;
      };

      eiji_f: eiji_f {
          compatible = "zmk,behavior-macro";
          #binding-cells = <0>;
          bindings
              = <&macro_tap &kp EIJI>
              , <&macro_press &kp LS(F)>
              , <&macro_pause_for_release>
              , <&macro_release &kp LS(F)>
              ;
      };

      eiji_g: eiji_g {
          compatible = "zmk,behavior-macro";
          #binding-cells = <0>;
          bindings
              = <&macro_tap &kp EIJI>
              , <&macro_press &kp LS(G)>
              , <&macro_pause_for_release>
              , <&macro_release &kp LS(G)>
              ;
      };

      eiji_h: eiji_h {
          compatible = "zmk,behavior-macro";
          #binding-cells = <0>;
          bindings
              = <&macro_tap &kp EIJI>
              , <&macro_press &kp LS(H)>
              , <&macro_pause_for_release>
              , <&macro_release &kp LS(H)>
              ;
      };

      eiji_i: eiji_i {
          compatible = "zmk,behavior-macro";
          #binding-cells = <0>;
          bindings
              = <&macro_tap &kp EIJI>
              , <&macro_press &kp LS(I)>
              , <&macro_pause_for_release>
              , <&macro_release &kp LS(I)>
              ;
      };

      eiji_j: eiji_j {
          compatible = "zmk,behavior-macro";
          #binding-cells = <0>;
          bindings
              = <&macro_tap &kp EIJI>
              , <&macro_press &kp LS(J)>
              , <&macro_pause_for_release>
              , <&macro_release &kp LS(J)>
              ;
      };

      eiji_k: eiji_k {
          compatible = "zmk,behavior-macro";
          #binding-cells = <0>;
          bindings
              = <&macro_tap &kp EIJI>
              , <&macro_press &kp LS(K)>
              , <&macro_pause_for_release>
              , <&macro_release &kp LS(K)>
              ;
      };

      eiji_l: eiji_l {
          compatible = "zmk,behavior-macro";
          #binding-cells = <0>;
          bindings
              = <&macro_tap &kp EIJI>
              , <&macro_press &kp LS(L)>
              , <&macro_pause_for_release>
              , <&macro_release &kp LS(L)>
              ;
      };

      eiji_m: eiji_m {
          compatible = "zmk,behavior-macro";
          #binding-cells = <0>;
          bindings
              = <&macro_tap &kp EIJI>
              , <&macro_press &kp LS(M)>
              , <&macro_pause_for_release>
              , <&macro_release &kp LS(M)>
              ;
      };

      eiji_n: eiji_n {
          compatible = "zmk,behavior-macro";
          #binding-cells = <0>;
          bindings
              = <&macro_tap &kp EIJI>
              , <&macro_press &kp LS(N)>
              , <&macro_pause_for_release>
              , <&macro_release &kp LS(N)>
              ;
      };

      eiji_o: eiji_o {
          compatible = "zmk,behavior-macro";
          #binding-cells = <0>;
          bindings
              = <&macro_tap &kp EIJI>
              , <&macro_press &kp LS(O)>
              , <&macro_pause_for_release>
              , <&macro_release &kp LS(O)>
              ;
      };

      eiji_p: eiji_p {
          compatible = "zmk,behavior-macro";
          #binding-cells = <0>;
          bindings
              = <&macro_tap &kp EIJI>
              , <&macro_press &kp LS(P)>
              , <&macro_pause_for_release>
              , <&macro_release &kp LS(P)>
              ;
      };

      eiji_q: eiji_q {
          compatible = "zmk,behavior-macro";
          #binding-cells = <0>;
          bindings
              = <&macro_tap &kp EIJI>
              , <&macro_press &kp LS(Q)>
              , <&macro_pause_for_release>
              , <&macro_release &kp LS(Q)>
              ;
      };

      eiji_r: eiji_r {
          compatible = "zmk,behavior-macro";
          #binding-cells = <0>;
          bindings
              = <&macro_tap &kp EIJI>
              , <&macro_press &kp LS(R)>
              , <&macro_pause_for_release>
              , <&macro_release &kp LS(R)>
              ;
      };

      eiji_s: eiji_s {
          compatible = "zmk,behavior-macro";
          #binding-cells = <0>;
          bindings
              = <&macro_tap &kp EIJI>
              , <&macro_press &kp LS(S)>
              , <&macro_pause_for_release>
              , <&macro_release &kp LS(S)>
              ;
      };

      eiji_t: eiji_t {
          compatible = "zmk,behavior-macro";
          #binding-cells = <0>;
          bindings
              = <&macro_tap &kp EIJI>
              , <&macro_press &kp LS(T)>
              , <&macro_pause_for_release>
              , <&macro_release &kp LS(T)>
              ;
      };

      eiji_u: eiji_u {
          compatible = "zmk,behavior-macro";
          #binding-cells = <0>;
          bindings
              = <&macro_tap &kp EIJI>
              , <&macro_press &kp LS(U)>
              , <&macro_pause_for_release>
              , <&macro_release &kp LS(U)>
              ;
      };

      eiji_v: eiji_v {
          compatible = "zmk,behavior-macro";
          #binding-cells = <0>;
          bindings
              = <&macro_tap &kp EIJI>
              , <&macro_press &kp LS(V)>
              , <&macro_pause_for_release>
              , <&macro_release &kp LS(V)>
              ;
      };

      eiji_w: eiji_w {
          compatible = "zmk,behavior-macro";
          #binding-cells = <0>;
          bindings
              = <&macro_tap &kp EIJI>
              , <&macro_press &kp LS(W)>
              , <&macro_pause_for_release>
              , <&macro_release &kp LS(W)>
              ;
      };

      eiji_x: eiji_x {
          compatible = "zmk,behavior-macro";
          #binding-cells = <0>;
          bindings
              = <&macro_tap &kp EIJI>
              , <&macro_press &kp LS(X)>
              , <&macro_pause_for_release>
              , <&macro_release &kp LS(X)>
              ;
      };

      eiji_y: eiji_y {
          compatible = "zmk,behavior-macro";
          #binding-cells = <0>;
          bindings
              = <&macro_tap &kp EIJI>
              , <&macro_press &kp LS(Y)>
              , <&macro_pause_for_release>
              , <&macro_release &kp LS(Y)>
              ;
      };

      eiji_z: eiji_z {
          compatible = "zmk,behavior-macro";
          #binding-cells = <0>;
          bindings
              = <&macro_tap &kp EIJI>
              , <&macro_press &kp LS(Z)>
              , <&macro_pause_for_release>
              , <&macro_release &kp LS(Z)>
              ;
      };

    _num_0: _num_0 {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_tap &kp EIJI>
            , <&macro_press &kp N0>
            , <&macro_pause_for_release>
            , <&macro_release &kp N0>
            ;
    };

    _num_1: _num_1 {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_tap &kp EIJI>
            , <&macro_press &kp N1>
            , <&macro_pause_for_release>
            , <&macro_release &kp N1>
            ;
    };

    _num_2: _num_2 {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_tap &kp EIJI>
            , <&macro_press &kp N2>
            , <&macro_pause_for_release>
            , <&macro_release &kp N2>
            ;
    };

    _num_3: _num_3 {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_tap &kp EIJI>
            , <&macro_press &kp N3>
            , <&macro_pause_for_release>
            , <&macro_release &kp N3>
            ;
    };

    _num_4: _num_4 {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_tap &kp EIJI>
            , <&macro_press &kp N4>
            , <&macro_pause_for_release>
            , <&macro_release &kp N4>
            ;
    };

    _num_5: _num_5 {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_tap &kp EIJI>
            , <&macro_press &kp N5>
            , <&macro_pause_for_release>
            , <&macro_release &kp N5>
            ;
    };

    _num_6: _num_6 {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_tap &kp EIJI>
            , <&macro_press &kp N6>
            , <&macro_pause_for_release>
            , <&macro_release &kp N6>
            ;
    };

    _num_7: _num_7 {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_tap &kp EIJI>
            , <&macro_press &kp N7>
            , <&macro_pause_for_release>
            , <&macro_release &kp N7>
            ;
    };

    _num_8: _num_8 {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_tap &kp EIJI>
            , <&macro_press &kp N8>
            , <&macro_pause_for_release>
            , <&macro_release &kp N8>
            ;
    };

    _num_9: _num_9 {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_tap &kp EIJI>
            , <&macro_press &kp N9>
            , <&macro_pause_for_release>
            , <&macro_release &kp N9>
            ;
    };

      _UNDERSCORE: _UNDERSCORE {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_tap &kp EIJI>
            , <&macro_press &kp UNDERSCORE>
            , <&macro_pause_for_release>
            , <&macro_release &kp UNDERSCORE>
            ;
    };

    _PIPE: _PIPE {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_tap &kp EIJI>
            , <&macro_press &kp PIPE>
            , <&macro_pause_for_release>
            , <&macro_release &kp PIPE>
            ;
    };

    _AMPERSAND: _AMPERSAND {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_tap &kp EIJI>
            , <&macro_press &kp AMPERSAND>
            , <&macro_pause_for_release>
            , <&macro_release &kp AMPERSAND>
            ;
    };

    _EXCLAMATION: _EXCLAMATION {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_tap &kp EIJI>
            , <&macro_press &kp EXCLAMATION>
            , <&macro_pause_for_release>
            , <&macro_release &kp EXCLAMATION>
            ;
    };

    _QUESTION: _QUESTION {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_tap &kp EIJI>
            , <&macro_press &kp QUESTION>
            , <&macro_pause_for_release>
            , <&macro_release &kp QUESTION>
            ;
    };

    _HASH: _HASH {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_tap &kp EIJI>
            , <&macro_press &kp HASH>
            , <&macro_pause_for_release>
            , <&macro_release &kp HASH>
            ;
    };

    _COMMA: _COMMA {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_tap &kp EIJI>
            , <&macro_press &kp COMMA>
            , <&macro_pause_for_release>
            , <&macro_release &kp COMMA>
            ;
    };

    _PERIOD: _PERIOD {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_tap &kp EIJI>
            , <&macro_press &kp PERIOD>
            , <&macro_pause_for_release>
            , <&macro_release &kp PERIOD>
            ;
    };

    _SEMICOLON: _SEMICOLON {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_tap &kp EIJI>
            , <&macro_press &kp SEMICOLON>
            , <&macro_pause_for_release>
            , <&macro_release &kp SEMICOLON>
            ;
    };

    _COLON: _COLON {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_tap &kp EIJI>
            , <&macro_press &kp COLON>
            , <&macro_pause_for_release>
            , <&macro_release &kp COLON>
            ;
    };

    _AT_SIGN: _AT_SIGN {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_tap &kp EIJI>
            , <&macro_press &kp AT_SIGN>
            , <&macro_pause_for_release>
            , <&macro_release &kp AT_SIGN>
            ;
    };

    _DOUBLE_QUOTES: _DOUBLE_QUOTES {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_tap &kp EIJI>
            , <&macro_press &kp DOUBLE_QUOTES>
            , <&macro_pause_for_release>
            , <&macro_release &kp DOUBLE_QUOTES>
            ;
    };

    _SINGLE_QUOTE: _SINGLE_QUOTE {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_tap &kp EIJI>
            , <&macro_press &kp SINGLE_QUOTE>
            , <&macro_pause_for_release>
            , <&macro_release &kp SINGLE_QUOTE>
            ;
    };

    _GRAVE: _GRAVE {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_tap &kp EIJI>
            , <&macro_press &kp GRAVE>
            , <&macro_pause_for_release>
            , <&macro_release &kp GRAVE>
            ;
    };

    _SLASH: _SLASH {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_tap &kp EIJI>
            , <&macro_press &kp SLASH>
            , <&macro_pause_for_release>
            , <&macro_release &kp SLASH>
            ;
    };

    _BACKSLASH: _BACKSLASH {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_tap &kp EIJI>
            , <&macro_press &kp BACKSLASH>
            , <&macro_pause_for_release>
            , <&macro_release &kp BACKSLASH>
            ;
    };


    _CARET: _CARET {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_tap &kp EIJI>
            , <&macro_press &kp CARET>
            , <&macro_pause_for_release>
            , <&macro_release &kp CARET>
            ;
    };

    _LESS_THAN: _LESS_THAN {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_tap &kp EIJI>
            , <&macro_press &kp LESS_THAN>
            , <&macro_pause_for_release>
            , <&macro_release &kp LESS_THAN>
            ;
    };

    _GREATER_THAN: _GREATER_THAN {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_tap &kp EIJI>
            , <&macro_press &kp GREATER_THAN>
            , <&macro_pause_for_release>
            , <&macro_release &kp GREATER_THAN>
            ;
    };

    _LEFT_BRACKET: _LEFT_BRACKET {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_tap &kp EIJI>
            , <&macro_press &kp LEFT_BRACKET>
            , <&macro_pause_for_release>
            , <&macro_release &kp LEFT_BRACKET>
            ;
    };

    _RIGHT_BRACKET: _RIGHT_BRACKET {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_tap &kp EIJI>
            , <&macro_press &kp RIGHT_BRACKET>
            , <&macro_pause_for_release>
            , <&macro_release &kp RIGHT_BRACKET>
            ;
    };

    _EQUAL: _EQUAL {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_tap &kp EIJI>
            , <&macro_press &kp EQUAL>
            , <&macro_pause_for_release>
            , <&macro_release &kp EQUAL>
            ;
    };

    _PLUS: _PLUS {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_tap &kp EIJI>
            , <&macro_press &kp PLUS>
            , <&macro_pause_for_release>
            , <&macro_release &kp PLUS>
            ;
    };

    _MINUS: _MINUS {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_tap &kp EIJI>
            , <&macro_press &kp MINUS>
            , <&macro_pause_for_release>
            , <&macro_release &kp MINUS>
            ;
    };

    _ASTERISK: _ASTERISK {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_tap &kp EIJI>
            , <&macro_press &kp ASTERISK>
            , <&macro_pause_for_release>
            , <&macro_release &kp ASTERISK>
            ;
    };

    _PERCENT: _PERCENT {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_tap &kp EIJI>
            , <&macro_press &kp PERCENT>
            , <&macro_pause_for_release>
            , <&macro_release &kp PERCENT>
            ;
    };

    _DOLLAR: _DOLLAR {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_tap &kp EIJI>
            , <&macro_press &kp DOLLAR>
            , <&macro_pause_for_release>
            , <&macro_release &kp DOLLAR>
            ;
    };

    _TILDE: _TILDE {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_tap &kp EIJI>
            , <&macro_press &kp TILDE>
            , <&macro_pause_for_release>
            , <&macro_release &kp TILDE>
            ;
    };

    _LPAR: _LPAR {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_tap &kp EIJI>
            , <&macro_press &kp LPAR>
            , <&macro_pause_for_release>
            , <&macro_release &kp LPAR>
            ;
    };

    _RPAR: _RPAR {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_tap &kp EIJI>
            , <&macro_press &kp RPAR>
            , <&macro_pause_for_release>
            , <&macro_release &kp RPAR>
            ;
    };

    _LEFT_BRACE: _LEFT_BRACE {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_tap &kp EIJI>
            , <&macro_press &kp LEFT_BRACE>
            , <&macro_pause_for_release>
            , <&macro_release &kp LEFT_BRACE>
            ;
    };

    _RIGHT_BRACE: _RIGHT_BRACE {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_tap &kp EIJI>
            , <&macro_press &kp RIGHT_BRACE>
            , <&macro_pause_for_release>
            , <&macro_release &kp RIGHT_BRACE>
            ;
    };

    jmp: mouse_pointer_jump {
        #binding-cells = <1>;
        compatible = "zmk,behavior-macro-one-param";
        bindings
            = <&macro_param_1to1 &kp MACRO_PLACEHOLDER>
            , <&to MOUSE_LAYER>
            ;
    };
  };

  behaviors {
    _a: _a {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp A>, <&eiji_a>;
        mods = <(MOD_LSFT)>;
    };

    _b: _b {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp B>, <&eiji_b>;
        mods = <(MOD_LSFT)>;
    };

    _c: _c {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp C>, <&eiji_c>;
        mods = <(MOD_LSFT)>;
    };

    _d: _d {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp D>, <&eiji_d>;
        mods = <(MOD_LSFT)>;
    };

    _e: _e {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp E>, <&eiji_e>;
        mods = <(MOD_LSFT)>;
    };

    _f: _f {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp F>, <&eiji_f>;
        mods = <(MOD_LSFT)>;
    };

    _g: _g {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp G>, <&eiji_g>;
        mods = <(MOD_LSFT)>;
    };

    _h: _h {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp H>, <&eiji_h>;
        mods = <(MOD_LSFT)>;
    };

    _i: _i {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp I>, <&eiji_i>;
        mods = <(MOD_LSFT)>;
    };

    _j: _j {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp J>, <&eiji_j>;
        mods = <(MOD_LSFT)>;
    };

    _k: _k {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp K>, <&eiji_k>;
        mods = <(MOD_LSFT)>;
    };

    _l: _l {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp L>, <&eiji_l>;
        mods = <(MOD_LSFT)>;
    };

    _m: _m {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp M>, <&eiji_m>;
        mods = <(MOD_LSFT)>;
    };

    _n: _n {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp N>, <&eiji_n>;
        mods = <(MOD_LSFT)>;
    };

    _o: _o {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp O>, <&eiji_o>;
        mods = <(MOD_LSFT)>;
    };

    _p: _p {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp P>, <&eiji_p>;
        mods = <(MOD_LSFT)>;
    };

    _q: _q {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp Q>, <&eiji_q>;
        mods = <(MOD_LSFT)>;
    };

    _r: _r {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp R>, <&eiji_r>;
        mods = <(MOD_LSFT)>;
    };

    _s: _s {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp S>, <&eiji_s>;
        mods = <(MOD_LSFT)>;
    };

    _t: _t {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp T>, <&eiji_t>;
        mods = <(MOD_LSFT)>;
    };

    _u: _u {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp U>, <&eiji_u>;
        mods = <(MOD_LSFT)>;
    };

    _v: _v {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp V>, <&eiji_v>;
        mods = <(MOD_LSFT)>;
    };

    _w: _w {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp W>, <&eiji_w>;
        mods = <(MOD_LSFT)>;
    };

    _x: _x {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp X>, <&eiji_x>;
        mods = <(MOD_LSFT)>;
    };

    _y: _y {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp Y>, <&eiji_y>;
        mods = <(MOD_LSFT)>;
    };

    _z: _z {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp Z>, <&eiji_z>;
        mods = <(MOD_LSFT)>;
    };

    _up_up: _up_up {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <0>;
        bindings
            = <&macro_press &my_up UP_ARROW_LAYER &_up>
            , <&macro_pause_for_release>
            , <&macro_release &my_up UP_ARROW_LAYER &_up>;
    };

    _left_left: _left_left {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <0>;
        bindings
            = <&macro_press &my_left LEFT_ARROW_LAYER &_left>
            , <&macro_pause_for_release>
            , <&macro_release &my_left LEFT_ARROW_LAYER &_left>;
    };

    _right_right: _right_right {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <0>;
        bindings
            = <&macro_press &my_right RIGHT_ARROW_LAYER &_right>
            , <&macro_pause_for_release>
            , <&macro_release &my_right RIGHT_ARROW_LAYER &_right>;
    };

    _down_down: _down_down {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <0>;
        bindings
            = <&macro_press &my_down DOWN_ARROW_LAYER &_down>
            , <&macro_pause_for_release>
            , <&macro_release &my_down DOWN_ARROW_LAYER &_down>;
    };

    _tab_tab: _tab_tab {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <0>;
        bindings
            = <&macro_press &my_tab TAB_LAYER &_tab>
            , <&macro_pause_for_release>
            , <&macro_release &my_tab TAB_LAYER &_tab>;
    };

    _delete_delete: _delete_delete {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <0>;
        bindings
            = <&macro_press &my_delete DELETE_LAYER &_delete>
            , <&macro_pause_for_release>
            , <&macro_release &my_delete DELETE_LAYER &_delete>;
    };

    _tab: _tab {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <0>;
        bindings
            = <&macro_press &mo TAB_LAYER &kp TAB>
            , <&macro_pause_for_release>
            , <&macro_release &mo TAB_LAYER &kp TAB>;
    };

    _delete: _delete {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <0>;
        bindings
            = <&macro_press &mo DELETE_LAYER &kp DELETE>
            , <&macro_pause_for_release>
            , <&macro_release &mo DELETE_LAYER &kp DELETE>;
    };

    _left: _left {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <0>;
        bindings
            = <&macro_press &mo LEFT_ARROW_LAYER &kp LEFT_ARROW>
            , <&macro_pause_for_release>
            , <&macro_release &mo LEFT_ARROW_LAYER &kp LEFT_ARROW>;
    };

    _up: _up {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <0>;
        bindings
            = <&macro_press &mo UP_ARROW_LAYER &kp UP_ARROW>
            , <&macro_pause_for_release>
            , <&macro_release &mo UP_ARROW_LAYER &kp UP_ARROW>;
    };

    _down: _down {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <0>;
        bindings
            = <&macro_press &mo DOWN_ARROW_LAYER &kp DOWN_ARROW>
            , <&macro_pause_for_release>
            , <&macro_release &mo DOWN_ARROW_LAYER &kp DOWN_ARROW>;
    };

    _right: _right {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <0>;
        bindings
            = <&macro_press &mo RIGHT_ARROW_LAYER &kp RIGHT_ARROW>
            , <&macro_pause_for_release>
            , <&macro_release &mo RIGHT_ARROW_LAYER &kp RIGHT_ARROW>;
    };

    // eiji
    _eiji: _eiji {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp EIJI>, <&kp EIJI>;
        mods = <(MOD_LCTL|MOD_LALT)>;
    };
    // eiji
    _w_orl_orr: _w_orl_orr {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        tapping-term-ms = <200>;
        flavor = "hold-preferred";
        bindings = <&kp>, <&_eiji>;
    };

    // kana
    _kana: _kana {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp KANA>, <&kp KANA>;
        mods = <(MOD_LSFT|MOD_LGUI)>;
    };
    // kana
    _w_oll_olr: _w_oll_olr {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        tapping-term-ms = <200>;
        flavor = "hold-preferred";
        bindings = <&kp>, <&_kana>;
    };

    mouse_xx: balanced_homerow_mods {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        tapping-term-ms = <200>;
        quick-tap-ms = <0>;
        flavor = "balanced";
        bindings = <&mo>, <&to>;
    };

    mouse: grave_escape {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&mouse_xx LL_LAYER MOUSE_LAYER>, <&kp X_LL_LL>;
        mods = <(MOD_LGUI|MOD_LSFT|MOD_LCTL|MOD_LALT)>;
        keep-mods = <(MOD_LGUI|MOD_LSFT|MOD_LCTL|MOD_LALT)>;
    };

    my_up: my_up {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        flavor = "tap-unless-interrupted";
        // 時間経過後 第1引数 送信
        tapping-term-ms = <300>;
        bindings = <&mo>, <&_up>;
        hold-trigger-key-positions = <KEY_POSITION_LEFT_SIDE KEY_POSITION_THUMB KEY_POSITION_LEFT_ARROW>;
    };

    my_left: my_left {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        flavor = "tap-unless-interrupted";
        // 時間経過後 第1引数 送信
        tapping-term-ms = <300>;
        bindings = <&mo>, <&_left>;
        hold-trigger-key-positions = <KEY_POSITION_LEFT_SIDE KEY_POSITION_THUMB KEY_POSITION_DOWN_ARROW>;
    };

    my_down: my_down {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        flavor = "tap-unless-interrupted";
        // 時間経過後 第1引数 送信
        tapping-term-ms = <300>;
        bindings = <&mo>, <&_down>;
        hold-trigger-key-positions = <KEY_POSITION_LEFT_SIDE KEY_POSITION_THUMB KEY_POSITION_LEFT_ARROW>;
    };

    my_right: my_right {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        flavor = "tap-unless-interrupted";
        // 時間経過後 第1引数 送信
        tapping-term-ms = <300>;
        bindings = <&mo>, <&_right>;
        hold-trigger-key-positions = <KEY_POSITION_LEFT_SIDE KEY_POSITION_THUMB KEY_POSITION_DOWN_ARROW>;
    };

    my_tab: my_tab {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        flavor = "tap-unless-interrupted";
        // 時間経過後 第1引数 送信
        tapping-term-ms = <300>;
        bindings = <&mo>, <&_tab>;
        hold-trigger-key-positions = <KEY_POSITION_LEFT_SIDE KEY_POSITION_THUMB>;
    };

    my_delete: my_delete {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        flavor = "tap-unless-interrupted";
        // 時間経過後 第1引数 送信
        tapping-term-ms = <300>;
        bindings = <&mo>, <&_delete>;
        hold-trigger-key-positions = <KEY_POSITION_LEFT_SIDE KEY_POSITION_THUMB>;
    };

    _tab_tab_tab: _tab_tab_tab {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&_tab_tab>, <&kp TAB>;
        mods = <(MOD_LGUI|MOD_LSFT|MOD_LCTL|MOD_LALT)>;
        keep-mods = <(MOD_LGUI|MOD_LSFT|MOD_LCTL|MOD_LALT)>;
    };

    _delete_delete_delete: _delete_delete_delete {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&_delete_delete>, <&kp DELETE>;
        mods = <(MOD_LGUI|MOD_LSFT|MOD_LCTL|MOD_LALT)>;
        keep-mods = <(MOD_LGUI|MOD_LSFT|MOD_LCTL|MOD_LALT)>;
    };

    _up_up_up: _up_up_up {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&_up_up>, <&kp UP_ARROW>;
        mods = <(MOD_LGUI|MOD_LSFT|MOD_LCTL|MOD_LALT)>;
        keep-mods = <(MOD_LGUI|MOD_LSFT|MOD_LCTL|MOD_LALT)>;
    };

    _down_down_down: _down_down_down {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&_down_down>, <&kp DOWN_ARROW>;
        mods = <(MOD_LGUI|MOD_LSFT|MOD_LCTL|MOD_LALT)>;
        keep-mods = <(MOD_LGUI|MOD_LSFT|MOD_LCTL|MOD_LALT)>;
    };

    _left_left_left: _left_left_left {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&_left_left>, <&kp LEFT_ARROW>;
        mods = <(MOD_LGUI|MOD_LSFT|MOD_LCTL|MOD_LALT)>;
        keep-mods = <(MOD_LGUI|MOD_LSFT|MOD_LCTL|MOD_LALT)>;
    };

    _right_right_right: _right_right_right {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&_right_right>, <&kp RIGHT_ARROW>;
        mods = <(MOD_LGUI|MOD_LSFT|MOD_LCTL|MOD_LALT)>;
        keep-mods = <(MOD_LGUI|MOD_LSFT|MOD_LCTL|MOD_LALT)>;
    };
  };

  keymap {
    compatible = "zmk,keymap";

    DEFAULT_LAYER {
      bindings = <
        &none                     &none                     &none                     &none                     &none                     &bt BT_CLR                &bootloader                                                                                                                                                                                                &bootloader               &bt BT_CLR                &none                     &none                     &none                     &none                     &none
        &none                     &_q                       &_w                       &_e                       &_r                       &_t                       &kp LEFT_CONTROL                                                                                                                                                                                                &none                     &_y                       &_u                       &_i                       &_o                       &_p                       &none
        &kp SPACE                 &_a                       &_s                       &_d                       &_f                       &_g                       &kp LEFT_ALT                      &none                     &none                     &none                     &none                     &none                     &_h                                    &_j                       &_k                       &_l                       &mouse                    &kp BACKSPACE
        &kp ESCAPE                &_z                       &_x                       &_c                       &_v                       &_b                               &none                     &none                     &_n                       &_m                       &_up_up_up                &_tab_tab_tab             &_delete_delete_delete    &kp RETURN                             
        &none                     &none                     &mo LH_SYM2               &mo LH_SYM1               &mo LH_NUM                                                                            &mt T_LL                  &mt T_LR                  &none                  &none                     &mt T_RL                  &mt T_RR                                                                                   &_left_left_left          &_down_down_down          &_right_right_right       &none                     &none
      >;
    };

    NUM_LAYER {
      bindings = <
        &none     &none  &none  &none          &none          &none          &none                                                                                                                         &none           &none          &none          &none          &none          &none          &none
        &none &none &none &none &none &none           &none                                                                                                                         &none           &none           &_num_7         &_num_8         &_num_9         &none           &none
        &none &none &none &none &none &none           &none                   &none       &none        &none        &none       &none           &none                  &_num_4         &_num_5         &_num_6         &none        &none
        &none &none &none &none &none &none                   &none        &none       &_num_0         &_num_1         &_num_2         &_num_3         &none        &none              
        &none  &none &mo LH_SYM2 &mo LH_SYM1 &mo LH_NUM     &mt T_LL &mt T_LR  &none       &none           &mt T_RL &mt T_RR &none &none &none &none &none
      >;
    };

    SYMBOL1_LAYER {
      bindings = <
        &none     &none  &none  &none          &none          &none          &none                                                                                                                         &none           &none          &none          &none          &none          &none          &none
        &none           &none           &none           &none           &none           &none           &none                                                                                                                     &none           &_UNDERSCORE    &_PIPE          &_AMPERSAND     &_EXCLAMATION   &_QUESTION      &none
        &none &none &none &none &none &none &none &none &none &none &none &none &_HASH            &_COMMA         &_PERIOD        &_SEMICOLON     &_COLON         &_AT_SIGN
        &none &none &none &none &none &none &none &none &_DOUBLE_QUOTES &_SINGLE_QUOTE  &_GRAVE         &_SLASH         &_BACKSLASH     &none             
        &none  &none &mo LH_SYM2 &mo LH_SYM1 &mo LH_NUM     &mt T_LL &mt T_LR  &none       &none           &mt T_RL &mt T_RR &none &none &none &none &none
      >;
    };

    SYMBOL2_LAYER {
      bindings = <
        &none     &none  &none  &none          &none          &none          &none                                                                                                                         &none           &none          &none          &none          &none          &none          &none
        &none           &none           &none           &none           &none           &none           &none                                                                                                                     &none           &_CARET         &_LESS_THAN     &_GREATER_THAN  &_LEFT_BRACKET  &_RIGHT_BRACKET &none
        &none &none &none &none &none &none &none &none &none &none &none &none &_EQUAL           &_PLUS          &_MINUS         &_ASTERISK      &_PERCENT       &_DOLLAR
        &none &none &none &none &none &none &none &none &_TILDE         &_LPAR          &_RPAR          &_LEFT_BRACE    &_RIGHT_BRACE   &none             
        &none  &none &mo LH_SYM2 &mo LH_SYM1 &mo LH_NUM     &mt T_LL &mt T_LR  &none       &none           &mt T_RL &mt T_RR &none &none &none &none &none
      >;
    };

    LL_LAYER {
      bindings = <
        &none     &none  &none  &none          &none          &none          &none                                                                                                                         &none           &none          &none          &none          &none          &none          &none
        &none    &kp X_LL_Q     &kp X_LL_W     &kp X_LL_E     &kp X_LL_R     &kp X_LL_T           &none                                                                                                                         &none           &none           &none         &none         &none         &none           &none
        &none    &kp X_LL_A     &kp X_LL_S     &kp X_LL_D     &kp X_LL_F     &kp X_LL_G           &none                   &none       &none        &none        &none       &none           &none                  &none         &none         &none         &none        &none
        &none    &kp X_LL_Z    &kp X_LL_X    &kp X_LL_C    &kp X_LL_V    &kp X_LL_B                   &none        &none       &none         &none         &none         &none         &none        &none              
        &none  &none &mo LH_SYM2 &mo LH_SYM1 &mo LH_NUM     &kp X_LL_T_LL &kp X_LL_T_LR  &none       &none           &kp X_LL_T_RL &kp X_LL_T_RR &none &none &none &none &none
      >;
    };

    TAB_LAYER {
      bindings = <
        &none           &none           &none           &none           &none           &none           &none                                                                                                                     &none           &none           &none           &none           &none           &none           &none
        &none           &kp X_TAB_Q     &kp X_TAB_W     &kp X_TAB_E     &kp X_TAB_R     &kp X_TAB_T     &none                                                                                                                     &none           &none           &none           &none           &none           &none           &none
        &none           &kp X_TAB_A     &kp X_TAB_S     &kp X_TAB_D     &kp X_TAB_F     &kp X_TAB_G     &none                   &none           &none           &none           &none           &none           &none             &none           &none           &none           &none           &none
        &none           &kp X_TAB_Z     &kp X_TAB_X     &kp X_TAB_C     &kp X_TAB_V     &kp X_TAB_B             &none           &none           &none           &none           &none           &none           &none           &none             
        &none           &none           &none           &none           &none                                                   &kp X_TAB_T_LL  &kp X_TAB_T_LR  &none           &none           &kp X_TAB_T_RL  &kp X_TAB_T_RR                                    &none           &none           &none           &none           &none
      >;
    };

    DELETE_LAYER {
      bindings = <
        &none           &none           &none           &none           &none           &none           &none                                                                                                                     &none           &none           &none           &none           &none           &none           &none
        &none           &kp X_DELETE_Q  &kp X_DELETE_W  &kp X_DELETE_E  &kp X_DELETE_R  &kp X_DELETE_T  &none                                                                                                                     &none           &none           &none           &none           &none           &none           &none
        &none           &kp X_DELETE_A  &kp X_DELETE_S  &kp X_DELETE_D  &kp X_DELETE_F  &kp X_DELETE_G  &none                   &none           &none           &none           &none           &none           &none             &none           &none           &none           &none           &none
        &none           &kp X_DELETE_Z  &kp X_DELETE_X  &kp X_DELETE_C  &kp X_DELETE_V  &kp X_DELETE_B          &none           &none           &none           &none           &none           &none           &none           &none             
        &none           &none           &none           &none           &none                                                   &kp X_DELETE_T_LL &kp X_DELETE_T_LR &none           &none           &kp X_DELETE_T_RL &kp X_DELETE_T_RR                           &none           &none           &none           &none           &none
      >;
    };

    LEFT_ARROW_LAYER {
      bindings = <
        &none           &none           &none           &none           &none           &none           &none                                                                                                                     &none           &none           &none           &none           &none           &none           &none
        &none           &kp X_LEFT_ARROW_Q &kp X_LEFT_ARROW_W &kp X_LEFT_ARROW_E &kp X_LEFT_ARROW_R &kp X_LEFT_ARROW_T &none                                                                                                                     &none           &none           &none           &none           &none           &none           &none
        &none           &kp X_LEFT_ARROW_A &kp X_LEFT_ARROW_S &kp X_LEFT_ARROW_D &kp X_LEFT_ARROW_F &kp X_LEFT_ARROW_G &none                   &none           &none           &none           &none           &none           &none&none           &none           &none           &none           &none
        &none           &kp X_LEFT_ARROW_Z &kp X_LEFT_ARROW_X &kp X_LEFT_ARROW_C &kp X_LEFT_ARROW_V &kp X_LEFT_ARROW_B         &none           &none           &none           &none           &none           &none           &none           &none
        &none           &none           &none           &none           &none                                                                  &kp X_LEFT_ARROW_T_LL &kp X_LEFT_ARROW_T_LR &none           &none           &kp X_LEFT_ARROW_T_RL &kp X_LEFT_ARROW_T_RR&none           &none           &none           &none           &none
      >;
    };

    RIGHT_ARROW_LAYER {
      bindings = <
        &none     &none  &none  &none          &none          &none          &none                                                                                                                         &none           &none          &none          &none          &none          &none          &none
        &none    &kp X_RIGHT_ARROW_Q    &kp X_RIGHT_ARROW_W     &kp X_RIGHT_ARROW_E    &kp X_RIGHT_ARROW_R    &kp X_RIGHT_ARROW_T           &none                                                                                                                         &none           &none           &none         &none         &none         &none           &none
        &none    &kp X_RIGHT_ARROW_A    &kp X_RIGHT_ARROW_S     &kp X_RIGHT_ARROW_D    &kp X_RIGHT_ARROW_F    &kp X_RIGHT_ARROW_G           &none                   &none       &none        &none        &none       &none           &none                  &none         &none         &none         &none        &none
        &none    &kp X_RIGHT_ARROW_Z    &kp X_RIGHT_ARROW_X     &kp X_RIGHT_ARROW_C    &kp X_RIGHT_ARROW_V    &kp X_RIGHT_ARROW_B                   &none        &none       &none         &none         &none         &none         &none        &none              
        &none          &none       &none      &none      &none                                               &kp X_RIGHT_ARROW_T_LL          &kp X_RIGHT_ARROW_T_LR          &none       &none           &kp X_RIGHT_ARROW_T_RL          &kp X_RIGHT_ARROW_T_RR                                                        &none    &none      &none        &none        &none
      >;
    };

    UP_ARROW_LAYER {
      bindings = <
        &none     &none  &none  &none          &none          &none          &none                                                                                                                         &none           &none          &none          &none          &none          &none          &none
        &none    &kp X_UP_ARROW_Q    &kp X_UP_ARROW_W     &kp X_UP_ARROW_E    &kp X_UP_ARROW_R    &kp X_UP_ARROW_T           &none                                                                                                                         &none           &none           &none         &none         &none         &none           &none
        &none    &kp X_UP_ARROW_A    &kp X_UP_ARROW_S     &kp X_UP_ARROW_D    &kp X_UP_ARROW_F    &kp X_UP_ARROW_G           &none                   &none       &none        &none        &none       &none           &none                  &none         &none         &none         &none        &none
        &none    &kp X_UP_ARROW_Z    &kp X_UP_ARROW_X     &kp X_UP_ARROW_C    &kp X_UP_ARROW_V    &kp X_UP_ARROW_B                   &none        &none       &none         &none         &none         &none         &none        &none              
        &none          &none       &none      &none      &none                                               &kp X_UP_ARROW_T_LL          &kp X_UP_ARROW_T_LR          &none       &none           &kp X_UP_ARROW_T_RL          &kp X_UP_ARROW_T_RR                                                        &none    &none      &none        &none        &none
      >;
    };

    DOWN_ARROW_LAYER {
      bindings = <
        &none     &none  &none  &none          &none          &none          &none                                                                                                                         &none           &none          &none          &none          &none          &none          &none
        &none    &kp X_DOWN_ARROW_Q    &kp X_DOWN_ARROW_W     &kp X_DOWN_ARROW_E    &kp X_DOWN_ARROW_R    &kp X_DOWN_ARROW_T           &none                                                                                                                         &none           &none           &none         &none         &none         &none           &none
        &none    &kp X_DOWN_ARROW_A    &kp X_DOWN_ARROW_S     &kp X_DOWN_ARROW_D    &kp X_DOWN_ARROW_F    &kp X_DOWN_ARROW_G           &none                   &none       &none        &none        &none       &none           &none                  &none         &none         &none         &none        &none
        &none    &kp X_DOWN_ARROW_Z    &kp X_DOWN_ARROW_X     &kp X_DOWN_ARROW_C    &kp X_DOWN_ARROW_V    &kp X_DOWN_ARROW_B                   &none        &none       &none         &none         &none         &none         &none        &none              
        &none          &none       &none      &none      &none                                               &kp X_DOWN_ARROW_T_LL          &kp X_DOWN_ARROW_T_LR          &none       &none           &kp X_DOWN_ARROW_T_RL          &kp X_DOWN_ARROW_T_RR                                                        &none    &none      &none        &none        &none
      >;
    };

    MOUSE_LAYER {
      bindings = <
        &none   &none  &none  &none          &none          &none          &none                                                                                                                         &none           &none          &none          &none          &none          &none          &none
        &none    &none     &none     &kp MOUSE_U    &none     &none           &none                                                                                                                         &none           &none           &mkp MB3         &none         &none         &none           &none
        &none    &none     &kp MOUSE_L     &kp MOUSE_D     &kp MOUSE_R     &none           &none                   &none       &none        &none        &none       &none           &none                  &mkp MB1         &mkp MB2         &none         &none        &none
        &to DEFAULT_LAYER    &none    &none    &none    &none    &none                   &none        &none       &none         &none         &kp MOUSE_WU         &none         &none        &none              
        &none  &none &none &none &none     &mt T_LL &mt T_LR  &none       &none           &mt T_RL &mt T_RR &kp MOUSE_WL &kp MOUSE_WD &kp MOUSE_WR &none &none
      >;
    };
  };
};
